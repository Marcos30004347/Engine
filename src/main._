#include "async/AsyncManager.hpp"
#include "async/Job.hpp"

#include "lib/datastructure/ConcurrentPriorityQueue.hpp"
#include "lib/datastructure/ConcurrentQueue.hpp"
#include "lib/datastructure/ConcurrentHashTable.hpp"
#include "lib/time/TimeSpan.hpp"
#include "lib/memory/SystemMemoryManager.hpp"
#include "lib/memory/allocator/SystemAllocator.hpp"

#include "os/print.hpp"

#include "window/window.hpp"
#include <cstdio>

using namespace window;
using namespace async;
using namespace lib;

// void push_to_list(uint32_t count, lib::parallel::List<uint32_t> *l)
// {
//   std::vector<lib::time::TimeSpan> push_times = std::vector<lib::time::TimeSpan>(count);
//   std::vector<lib::time::TimeSpan> pop_times = std::vector<lib::time::TimeSpan>(count);

//   double pops = 0;
//   double pushes = 0;

//   lib::Timer timer;
//   uint32_t x = 0;

//   for (uint32_t i = 0; i < count; i++)
//   {
//     timer.start();
//     l->push_back(x);
//     push_times[i] = timer.end();

//     timer.start();
//     if (l->pop_front(x))
//     {
//     }
//     pop_times[i] = timer.end();
//   }

//   for (uint32_t i = 0; i < count; i++)
//   {
//     pops += pop_times[i].nanoseconds();
//     pushes += push_times[i].nanoseconds();
//   }

//   threadSafePrintf("pushes %f ns, pops = %f ns\n", pushes / count, pops / count);
// }

// void enqueue_list_pushes_and_pops()
// {
//   lib::parallel::List<uint32_t> *l = new lib::parallel::List<uint32_t>();

//   auto p0 = AsyncManager::enqueue(push_to_list, 10000, l);
//   auto p1 = AsyncManager::enqueue(push_to_list, 10000, l);
//   auto p2 = AsyncManager::enqueue(push_to_list, 10000, l);
//   auto p3 = AsyncManager::enqueue(push_to_list, 10000, l);

//   AsyncManager::wait(p0);
//   AsyncManager::wait(p1);
//   AsyncManager::wait(p2);
//   AsyncManager::wait(p3);

//   delete l;
// }

void push_to_queue(uint32_t count, lib::ConcurrentQueue<uint32_t> *l)
{
  std::vector<lib::time::TimeSpan> push_times = std::vector<lib::time::TimeSpan>(count);
  std::vector<lib::time::TimeSpan> pop_times = std::vector<lib::time::TimeSpan>(count);

  double pops = 0;
  double pushes = 0;

  lib::time::Timer timer;
  uint32_t x = 0;

  for (uint32_t i = 0; i < count; i++)
  {
    timer.start();
    l->enqueue(x);
    push_times[i] = timer.end();

    timer.start();
    if (l->dequeue(x))
    {
    }
    pop_times[i] = timer.end();
  }

  for (uint32_t i = 0; i < count; i++)
  {
    pops += pop_times[i].nanoseconds();
    pushes += push_times[i].nanoseconds();
  }

  os::print("pushes %f ns, pops = %f ns\n", pushes / count, pops / count);
}

void enqueue_queue_pushes_and_pops()
{
  lib::ConcurrentQueue<uint32_t> *l = new lib::ConcurrentQueue<uint32_t>();

  auto p0 = AsyncManager::enqueue(push_to_queue, 10000, l);
  auto p1 = AsyncManager::enqueue(push_to_queue, 10000, l);
  auto p2 = AsyncManager::enqueue(push_to_queue, 10000, l);
  auto p3 = AsyncManager::enqueue(push_to_queue, 10000, l);

  AsyncManager::wait(p0);
  AsyncManager::wait(p1);
  AsyncManager::wait(p2);
  AsyncManager::wait(p3);

  delete l;
}



void push_to_priority_queue(uint32_t count, lib::ConcurrentPriorityQueue<uint32_t, uint32_t> *l)
{
        os::print("Start pq\n");
  std::vector<lib::time::TimeSpan> push_times = std::vector<lib::time::TimeSpan>(count);
  std::vector<lib::time::TimeSpan> pop_times = std::vector<lib::time::TimeSpan>(count);

        os::print("all pq\n");
  double pops = 0;
  double pushes = 0;

  lib::time::Timer timer;
  uint32_t x = 0;

  for (uint32_t i = 0; i < count; i++)
  {
      os::print("Start push\n");
    timer.start();
    x = i + 1;

    l->push(x, x);
      os::print("End enqueue\n");
    push_times[i] = timer.end();


    timer.start();
    /*
    if (l->try_pop(x))
    {
    }
    */
    pop_times[i] = timer.end();
  }

  for (uint32_t i = 0; i < count; i++)
  {
    pops += pop_times[i].nanoseconds();
    pushes += push_times[i].nanoseconds();
  }

  os::print("pushes %f ns, pops = %f ns\n", pushes / count, pops / count);
}

void enqueue_priority_queue_pushes_and_pops()
{
  lib::ConcurrentPriorityQueue<uint32_t, uint32_t> *l = new lib::ConcurrentPriorityQueue<uint32_t, uint32_t>();
  
  os::print("Start enqueue\n");

  auto p0 = AsyncManager::enqueue(push_to_priority_queue, 10000, l);
  //auto p1 = AsyncManager::enqueue(push_to_priority_queue, 10000, l);
  //auto p2 = AsyncManager::enqueue(push_to_priority_queue, 10000, l);
 // auto p3 = AsyncManager::enqueue(push_to_priority_queue, 10000, l);

  os::print("End enqueues\n");

  AsyncManager::wait(p0);
//  AsyncManager::wait(p1);
 // AsyncManager::wait(p2);
 // AsyncManager::wait(p3);
  delete l;
}

void entry()
{
  //   auto p = AsyncManager::enqueueGroup(group_example, ARRAY_SIZE, 16, a);
  //   Window *appWindow = createWindow(WindowBackend::WindowBackend_SDL3, WindowSurfaceType::WindowSurface_Vulkan, "Engine");
  // threadSafePrintf("list\n");
  // auto p0 = AsyncManager::enqueue(enqueue_list_pushes_and_pops);
  // AsyncManager::wait(p0);
  os::print("queue\n");
  AsyncManager::wait(AsyncManager::enqueue(enqueue_queue_pushes_and_pops));
  //os::threadSafePrintf("priority queue\n");
  //AsyncManager::wait(AsyncManager::enqueue(enqueue_priority_queue_pushes_and_pops));

  AsyncManager::stop();
}



int main()
{
  lib::memory::SystemMemoryManager::init();
  SystemSettings settings;
  AsyncManager::init(entry, settings);
  
  //   rhi::DeviceRequiredLimits limits;

  //   limits.minimumComputeSharedMemory = 0;
  //   limits.minimumComputeWorkGroupInvocations = 0;
  //   limits.minimumMemory = 1024 * 1024;

  //   std::vector<rhi::DeviceFeatures> features = {
  //     rhi::DeviceFeatures::DeviceFeatures_Graphics,
  //     rhi::DeviceFeatures::DeviceFeatures_Compute,
  //   };

  //   rhi::Device *device = rhi::Device::create(rhi::DeviceBackend_Vulkan_1_2, limits, features);

  //   rhi::SurfaceHandle surface = device->addWindowForDrawing(appWindow);

  //   device->init();

  //   while (!appWindow->shouldClose())
  //   {
  //     appWindow->update();
  //   }

  //   delete device;

  AsyncManager::shutdown();
  lib::memory::SystemMemoryManager::shutdown();
  
  return 0;
}

// #include "lib/parallel/priorityqueue.hpp" // Assuming your ConcurrentPriorityQueue is in priorityqueue.hpp
// #include <algorithm>
// #include <chrono>
// #include <iostream>
// #include <numeric> // std::iota
// #include <random>
// #include <thread>
// #include <vector>

// using namespace lib::parallel;

// // Function to generate a vector of unique random keys
// std::vector<int> generate_random_keys(int num_keys)
// {
//   std::vector<int> keys(num_keys);
//   std::iota(keys.begin(), keys.end(), 0); // Fill with 0, 1, 2, ..., num_keys-1
//   std::random_device rd;
//   std::mt19937 g(rd());
//   std::shuffle(keys.begin(), keys.end(), g); // Shuffle the keys
//   return keys;
// }

// // Function for a thread to push elements into the priority queue
// void push_thread_func(ConcurrentPriorityQueue<int, int> &pq, const std::vector<int> &keys, int thread_id, int num_threads)
// {
//   int num_elements_per_thread = keys.size() / num_threads;
//   int start_index = thread_id * num_elements_per_thread;
//   int end_index = (thread_id == num_threads - 1) ? keys.size() : start_index + num_elements_per_thread;

//   for (int i = start_index; i < end_index; ++i)
//   {
//     pq.insert(keys[i], keys[i]); // Insert key as both key and value
//   }
// }

// // Function for a thread to pop elements from the priority queue
// void pop_thread_func(ConcurrentPriorityQueue<int, int> &pq, int num_elements_to_pop)
// {
//   for (int i = 0; i < num_elements_to_pop; ++i)
//   {
//     int value;
//     if (pq.deletemin(value))
//     {
//         std::cout << "Popped: " << value << " from thread " << std::this_thread::get_id() << std::endl; //Removed cout to reduce noise
//     }
//     else
//     {
//       // std::cout << "Pop failed" << std::endl; //Removed cout to reduce noise
//     }
//   }
// }

// // Test function to spawn threads and test concurrent push and pop
// void test_concurrent_priority_queue(int num_threads, int num_elements_to_push, int num_elements_to_pop)
// {
//   ConcurrentPriorityQueue<int, int> pq;
//   std::vector<std::thread> push_threads;
//   std::vector<std::thread> pop_threads;

//   // 1. Prepare data for pushing (unique random keys)
//   std::vector<int> keys = generate_random_keys(num_elements_to_push);

//   // 2. Spawn push threads
//   for (int i = 0; i < num_threads; ++i)
//   {
//     push_threads.emplace_back(push_thread_func, std::ref(pq), std::ref(keys), i, num_threads);
//   }

//   // 3. Spawn pop threads
//   for (int i = 0; i < num_threads; ++i)
//   {
//     pop_threads.emplace_back(pop_thread_func, std::ref(pq), num_elements_to_pop / num_threads);
//   }

//   // 4. Wait for all threads to finish
//   for (auto &thread : push_threads)
//   {
//     thread.join();
//   }

//   for (auto &thread : pop_threads)
//   {
//     thread.join();
//   }

//   // 5. (Optional) Verify the queue is empty after all pops
//   int remaining_elements = 0;
//   int val;

//   while (pq.deletemin(val)) {
//     remaining_elements++;
//   }

//   std::cout << "Remaining elements in queue: " << remaining_elements << std::endl;

//   if (remaining_elements != 0)
//   {
//     std::cout << "FAILED: Queue is not empty after all pops" << std::endl;
//   }
//   else
//   {
//     std::cout << "PASSED: Queue is empty after all pops" << std::endl;
//   }
// }

// int main()
// {
//   // Example usage:
//   int num_threads = 4;
//   int num_elements_to_push = 10000;
//   int num_elements_to_pop = 10000;
//   test_concurrent_priority_queue(num_threads, num_elements_to_push, num_elements_to_pop);

//   return 0;
// }
